*Capt 2:

Módulos são scripts reaproveitaveis. São divididos em:

	1 - Internos: módulos que nós desenvolvemos
	
	2 - Core Modules: módulos que vem com o node.js
	
	3 - Externos: módulos que instalamos via npm
	
Core Modules: precisam ser importados

	1 - Verifica a extensão do arquivo: require('path') -> path.extname
	
	2 - Ler argumentos: process.argv
	
	3 - Lendo entrada de dados: require('readline') nesse caso usamos question, exemplo em ~/NodeJs-Estudo/2-Fundamentos/9-Lendo-Input
	
Módulos externos: Podem ser instalados pelo npm, para tal usaremos o npm init, ele mapeará os modulos e os salvará em node_modules; podem ser instalados com npm install <nome>

	1 - auxilia a ler comandos pela linha de comandos? require("minimist"): minimist(process.argv.slice(2)).
	
	2 - Chalk melhora a visualização e cores: require("chalk") -> console.log(chalk.gree('Parabéns')).

	3 - Melhorando leitura de dados: require("inquirer") exemplo em ~/NodeJs-Estudo/2-Fundamentos/10-Abstracao-Input
	
Event Loop: Executa linha por linha de cima para baixo, isso nos ajuda a evitar problemas de concorrência ~/NodeJs-Estudo/2-Fundamentos/11-Event-Loop
 
Event Emitter é um core module chamado events, precisa instanciar a classe EventEmitterque vem deste módulo ~/NodeJs-Estudo/2-Fundamentos/12-Event-Emitter

Sincrono e Assíncrono: São as duas opções de executar metódos conhecidos como sync e async
	
	1 - forma sincrona: o código espera ser totalmente executado para prosseguir
	
	2 - forma assíncrona: o código continue progredindo e em um ponto futuro obtém a resposta da execução assóncrona ~/NodeJs-Estudo/2-Fundamentos/13-Asscinc-Sinc
	
	3 - require('fs') -> fs.writeFileSync('arquivo.txt', 'oi')
	
	
Erros no node: duas formas de evidenciar erros no node

	1 - throw: uma forma de encerrar o programa, gerando um novo erro
	
	2 - try catch: uma forma de evidenciar algo que deu errado em um bloco de código e exibir a mensagem de erro ~/NodeJs-Estudo/2-Fundamentos/14-Erros
	
*Capt 3:

	1 - Sobre os Core Modules:
	
		1 - http: módulo para criar servidores HTTP
		
		2 - path: extrair informações de paths (caminhos de arquivod)
		
		3 - fs: file system, leitura e escrita
		
		4 - url: módulo para trabalhar com URLs
		
	2 - Url: O módulo url serve para swcompor uma URL que passamos oara o metódo parse. Podemos resgatar host, path, search, euqry, etc; apartir das informações podemos alterar a lógica do nosso código.
	
	3 - Podemos trabalhar com estes módulos juntos e ter um resultado interessante. Com o http criamos o nosso server e alteramos a resposta baseada na URL acessada. Com a url passamos os parâmetros que vem pela query string, para alterar a lógica do http.
	
	4 - Módulo fs: o módulo fs (file system) serve para trabalhar com arquivos e diretórios; também é um core Module, podemos ler e escrever em arquivos, por exemplo: logs do sistema
	
	5- Escrevendo em arquivos fs writeFile: podem criar e escrever em arquivos, utilizando o método writeFile. Esta escrita pode estar associada a um conjunto de operações, como o envio de informações de um usuário, por exemplo.
	
	6 - Atualizando em arquivos fs appendFile atualiza o arquivo
	
	7 - Removendo o arquivo fs unlink precisa passar o arquivo vomo parametro, pode usar o callback
	
	8 - renomeando um arquivo com fs rename, pode usar o callback
	
	9 - Rotas com node, podemos criar um sistema de roteamento. As rotas são basicamente as rotas que acessamos 
	
	10 - Dtalhes de arquivos, podemos saber mais sobre os arquivos que temos acesso, utilizando o fs stat; ele indorma o tamanho, data de criação, se é arquivo ou diretório e etc
	
	11 - Com o path conseguimos extrair diversas informações sobre caminhos e arquivos. Também é um code module
	
	12 - Com a função resolve é possível saber qual o path do arquivo alvo; e coma função join é possível formar um path dinâmico, com variáveis e valores fixos
	
	13 - Trabalhando com diretórios, método exists e mkdir
	
	14 - Módulo os, podemos extrair informaçõese do sistema ooperacional, também é um core módule
	
*Capt 4:
	
	1 - Npm é o principal gerenciador de pacotes do Node.js; Pode instalar, configurar projetos e rodar scripts. A criação gera sempre um package
	
	2 - Para iniciar usamos o npm init
	
	3 - Criação rápida: npm init -y
	
	4 - Instalando pacotes: npm install <nome>; ao fazer isso criamos a pasta node_modules, sempre que rodamos npm install a pasta node_modules é recriadaS

	5 - O site da Npm(nomjs.com) fornece mais informações sobre os módulos
	
	6 - Há uma possibilidade de instalar pacotes apenas para o ambiente de desenvolvimento, utilizamos a flag: --save-dev; Isso faz com que ele seja separado no pack.json dos demais e então na biuld de produção não instalaremos estes módulos. 

	7 - Atualizações de pacotes, onstantemente os pacotes do npm são atualizados por seus desenvolvedores; temos então comando: npm update; Que vai fazer a atualização de todos os pacotes instalados no packgae.json. É possível atualizar um pacote específico com: npm update <nome>.  npx npm-check-updates -u

	8 - Instalando pacotes global, um pacote global não fica salvo na pasta node_modules do projeto. Ele fica salvo no computador do usuário, a vantagem é que podemos acessá-lo em qualquer local via terminal utilizando a: flag -g; em node install.

	9 - Executando scripts com npx, Alguns pacotes são scripts executáveis, que resultam em alguma ação no nosso computador. Como por exemplo a instalação do React, que é feita pelo nox, desta maneira uma série de processos de processos são simplificados por este executor npx cowsay "Hello World"

	10 - Remover um pacote com npm, para remover um pacote utilizamos o comando: npm uninstall <nome>, subistituindo <nome> pelo nome do pacote; Isso faz com que o pacote seja removido do package.json também.

	11 - Express: Um framework para Node.js muito utilizado que serve para criarmos aplicações web. Nele podemos criar rotas, renderizar HTML, conectar a um banco de dados; O express torna a criação de apps muito mais simplificada, do que com os core modules

	12 - Rota é um conceito super importante e presente em aplicação web; basicamente são as URL's que acessamos, se criarmos uma rota /produto, podemos acessar através da URL: www.nossosite.com/produtos; quando o usuário acessa podemos acessar várias lógicas, como carregar produtos do banco de dados.

	13 - Importar o express e invocá-lo; definir uma porta base para a aplicação, definir uma porta base para a aplicação, criar uma rota (url que será acessada), executar o método listen na porta especificada.

	14 - Renderizando HTML, para enviar html como resposta utilizando o método sendFile, isso faz com que o arquivo seja rederizado no navegador; precisamos acessar o arquivo por meio do diretório base, isso requer o módulo path.

	15 - Precisams toda vez reiniciar o servidor para receber as atualizações, isso é muito custoso. Vamos então instalar i módulo Nodemon; que a cada vez que o arquivo é salvo reiniciar o projeto, facilitando nossa vida. Vamos salvar como dependência de desenvolvimento (--save-dev)

	16 - Middlewares são códigos que podem ser executados nno meio/entre de alguma ação e outra (verificar se usuário está logado, pode ter uma para esta verificação. o métodoque nos dá acesso a utilizar middlwares é o use no Express)

	17 - Podemos resgatar osparâmetros da url por meio de req,acessamos req.params.<nome>; onde nome deve ser o que está definido na url do Express que fica desta forma: /users/:id. Ndxtd caso estaríamos buscando o usuário no banco de dados pelo id que vem pela url

	18 - nviando dados POST, para enviar os dados vamos precisar criar um form e mandar os dados via POST para alguma URL; No Express precisamos colocar alguns middlewares como o express.json para ler os dados do body e também uma roda que vai receber estes dados, utilizando o método post do Express

	19 - Módulos de rotas, podemos unir várias rotas em módulos, isso vai deixar nosso código mais organizad; Normalmente criamos uma pasta ou arquivo que contém estas rotas que representam uma entidade em comum, como users; vamos utilizar um novo objeto chamado router, e colocar as rotas nele.

	20 - Colocando CSS para inserir css nas páginas estáticos vamos precisar de um middleware que é o express.static precisamos colocar um diretório base, que normalmente é o public e criar os estáticos a partir desta pasta no HTML podemos acessar o caminho relativo após a pasta definida.

	21 - Página 404, para quando o usuário acessar uma página que não existe. Basta criar um novo middleware abaixo de todas as rotas, que responde com este status e envia um arquivo de template referente a esta página.

	22 - Template Engine é uma forma de deixar o HTML dinâmico, inserindo variáveis do bck-end no front-end; podemos também criar layouts que são aproveitados. É essencial para projetos que usam banco dedados, que não são estáticos; temos diversos disponíveis: EJS, Pug e Handlebars; todos atingem o mesmo objetivo, mas há algumas diferenças de setup e funcionalidades.

	23 - O Handlebars é uma das templete engnies mais utilizadas; colocamos os dados dinâmicos no HTML entre {{}} para serem impressos. Podemos criar condicionais e também loops no template, conhecido pela sua sintaxe limpa no front, nos força a não executar lógica HTML; o nome do pacote é express-handlebars

	24 - Podemos criar layouts para reaproveitar código entr páginas. Vamos criar uma pasta chamada layouts em views e nela criamos o template que será repetido; colocamos uma tag especial {{{body}}} para que neste local o 'corpo' do site seja inserido em todas as views agora o layout é repetido.

	25 - Utilizar uma estrutura cndicional nos oermite mais flexibilidade no layout; podemos utilizar if no Handlebars, a sintaxe é {{#if algumacoisa}}... {{/if}} só imprime o que está entre as condicionais, se o resultado dela for verdadeiro 

	26 - O else é um complemento do if, utilizamos no handlebars para a exibição de outra do layout, caso a condição seja falsa. Isso nos dã mais flexibilidade: {{#if alguma coisa}}...{{else}}...{{#/if}} 

	27 - Estrutura de repetições no handlebars são feitas pelo operador each; a sintaxe é {{#each}}...{{/each}} em um array podemos chamar os itens com {{this}} então cada um dos itens é acessado na view, como o handlebars prega um template mais limpo, devemos mandar apenas o necessário para o front-end

	28 - O with nos permite abstrair um objeton ou seja, podemos acessar as propriedades sem nos referenciarmos sempre ao objeto antes, a sintaxe é: {{#with objeto}}...{{/with}}, simplificando o código.

	29 - Os partials são como mini templates, que precisam ser repetidos em diversos locais da nossa aplicação; precisamos realizar algumas modificações na implementação do Handlebars, os partials geralmente ficam em views/partials. Utilizamos a sintaxe: {{> partial}} para chamá-lo no projeto.

	30 - Css com handlebars, a inclusão de css handlebars é muito semelhante a que realizarmos apenas com Express.  Precisamos definir a pasta dos arquivos estáticos e vamos linkar o css com o nosso layout em comum para todas as páginas

*Capt 5:

	1 - Os banco de dados relacionais são constituídos por algumas entidades. Banco de dados guarda os dados do projeto, tabelas onde categorizamos os dados e os inserimos, colunas onde separamos os dadosem uma tabela, dados o que é inserido, modificado, atualizado e removido em uma tabela,relacionamentos ligações entre as tabelas.

	2 - O mYSQL é um SGBD que vai ajudar a trabalhar com Banco de dados relacionais, também é o mais utilizado atualmente em sistemas e aplicações; muitos projwtos de Node.js utilizam MySSql

	3 - Integração do MySql, primeiramente vamos precisar instalar o que é um pacote chamado mysql, primeiro deve-se o instalar com npm e deepois conectar com o nosso bd; vamos inserir: host, user, passeord e o banco

	4 - Para manioular os dados do sistema vamos orecisar criar uma tabela, faremos isso via workbench, criando uma tabela chamada books, onde vamos cadastrar livros. estes livros vão precisar de três informações: título, autor e número de páginas

	5 - Inserindo dados, para inserir dados no banco de vamo precisar criar e exexutar uma mysql. A query em si é uma string, seguindo os padrões do MySql já para executar vamos utilizar o método query do pacote mysql e nesta faremos o uso da instrução INSERT, que insere dados

	7 - sgatando dados, para resgatar dados vamos precisar criar uma query, que será um SELECT, podemos escolher quais dados são retornados , determinado as colunas e podemos imprimi-los nas nossas views.

	8 - Para resgatar um dado específico vamos utilizar WHERE, desta maneira conseguimos filtrar filtrar por uma ciluna a um valor, poderemos enviotão achar os livros pelos seus ids.

	9 - Para editar algum dado temos alguns preparos a realizar, primeiramentd vamos resgatar o dado, como na aula anterior e normalmente preechemos o formulário de dados que foram resgatados (SELECT), isso faz que o usuário lembre dos dados cadastrados e possa esolher o que editar.

	10 - Para concluir esta etapa precisamos criar uma nova rota como POST, isso porque o navegador só consegue interpretar dois verbos atualmente (GET e POST) e então faremos uma query de UPDATE para processar a atualização, note que precisamos passar o id do livro neste formulário também

	11 - Para remover um item vamos utilizar a query DELETE; preciisamos enviar oara a rota um POST  com o id do item a ser removido.

	12 - Connection Pool é um recurso para otimizae as conexões, criando m cache e permitindo sua reutilização. O driver mysql tem este recurso desenvolvido, podemos aplicá-lo, este recurso também controla as conexões abertas, fechando assim que se tornam inativas.

	13 - Preparando a query, uma forma de nos defendermos de SQL Injection, podemos utilizar interrogações em vez dos valores e substituir através de um segundo passo, para a query ser executada corretamente. Esta técnica deve ser utilizada em qualquer programa que vá para a produção.

*Capt 6:

	1 - Object Relational Mapper (ORM). Abstrai a complexidade das queries, para trabalharmos com métodos; nos concentramos na regra de negócios e não nos comandos SQL, uma ORM muito utilizada para Node.mjs é a Sequelize em alguns casos um ORM pode trazer prejuízos de performace; a query pura executa mais rapidamente do que a ORM

	2 - Uma ORM para Node.js, ela é baseada em promises (then, catch); tem intehração para vários bancos relacionais, como o MySQL. Precisamos sempre criar um Model que é reflexo da nossa tabela em uma classe. Precisamos instalar o pacote, já que é um módulo externo.

	3 - Para instalar o Sequelize utilizamos o pacote Sequelize e para conectar precisamos passar os mesmos dados que no outro pacote: banco, usuáio e senha. Instanciando a classe Sequelize; é possível checar a conexão com o método authenticate.

	4 - Para criar um Model temos que instanciar uma classe que representará uma tabela; um Model User cria uma nova tabela chamada users, colocamos os campos e os tipos dele como propriedades do model, futuramente ele será utilizado para operações entre aplicações e banco. O método sunc faz a criação das tabelas baseadas nos models.

	5 - Para inserir um dado vamos precisar do MOdel que criamos, ou seja, importar ele no arquivo de execução do comando; o método a ser utilizado é o create, ele leva como parâmetro todos os campos, e insere registro na tabela.

	6 - Para ler os dados de uma tabela vamos utilizar o método fetchAll que também requer o model, no nosso caso o User, os dados vem em um objeto especial, para transformar em um array de objetos temos que inserir um parâmetro que é o raw como true.

	7 - Para filtrar dados como o Sequelize utilizando o WHERE, precisamos inserir um novo parâmetro que serã o WHERE, um objeto onde colocamos a propriedades e valores que queremos filtrar e para retornar um resuktado podemos utilizar o método findOne.

	8 - Para remover itens utilizando o método destroy a função vai ficar bem parecida com a de resgatar um usuário, só que será um POST, e que efetua a remoção, depois redirecionamos. Precisamos também criar um formulário no front-end

	9 - O primeiro passo para a edição é resgatar os dados do item, com isso podemos preencher o formulário, para depois fazer o UPDATE, Vamos utilizar métofo findOne, igual a rota de visualização, e fazer o preenchimento do form na nossa nova view.

	10 - Para realizar a query de update utilizar o método update do sequelize; nele passamos objeto atualizado do item e também filtramos por meio do atributo where, que item vamos atualizar.

	11 - Podemos forçar a reconstrução das tabelas no método sync, onde são sincronizados os models e as tabelas; vamos colocar um atributo: force como true; exemplo sync ({ force: true }) note que os dados são perdidos neste processo

	12 - Em bancos relacionais podemos criar relacionamentos entre as tabelas, para concretizar isso no sequelize vamos precisar de dois Modelos, ou seja precisamos criar mai um no nosso projeto; depois precisamos inserir um método de relacionamento em algum dos models que vai criar a relação; após o sync uma coluna que faz a relação entre as tabelas será criada que representa a FOREIGN KEY.

	13 - Para adicionar o dado relacionado o fluxo é quase o mesmo; o grande detalhe é que precisamos passar o id do item que o relaciona, podemos fazer com um input hidden dentro do form que contém os dados do novo item e enviando para uma nova rota no nosso sistema.

	14 - Precisamos definir as relações entre os dois models, podemos fazer isso no model de endereços; depois basta utilizar o operador include com o nome do model, onde estamos resgatando o dado; isso faz com que os registros associados também venham na seleção como há dados relacionadosm precisamos remover raw.

	15 - Para remover itens relacionados utilizaremos o mesmo processo de remoção de itens, criaremos um formulário que envia o id do item e uns rota para receber estas informações e executa a remoção utilizando o destroy.

